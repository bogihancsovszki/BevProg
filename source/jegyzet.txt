pointer
int main()
{
	int var =7; 
	int *ptr = &var; // a var értéke tárolsa pointerben
	cout << "pi==" << pi << "; contents of pi==" << *pi << endl;
	 // kiiratása: ha pi akkor a memoria cimet ha *pi akkor az értékét
	*pi = 27; //érték változtatás
	*pd = 3.14159;
	*pd = *pi;
	return 0;
}


free_store
int main()
{
	double* a = new double; //double érték adás nélkül 0 lesz
	double* b = new double(0);
	cout << *a << endl;
	cout << *b << endl;
	double* c = new double[4]; //tömb elem megadása 5elem

	for (int i = 0; i < 4; ++i) //elemek megadása tol 4ig
		cout << c[i] << endl; //tömb elemeinek kiiratása
	int* d = new int[4];
	cout << d[2] << endl;

	for (int i = 0; i < 4; ++i)
		cout << d[i] << endl;

	cout << d[100] << endl; //a tömbön kívüli elemre is hivatkozhatunk ott is 0 nem jo
	cout << d[-3] << endl;

	double* e = new double[4] { 1.1, 2.2, 3.3, 4.4 }; //tömb értékeinek megadása
	for (int i = 0; i < 4; ++i) //tömb elemeinek kiiratása
		cout << e[i] << endl;

	double* p0 = nullptr; //nem mutatsehova
	if (p0 == nullptr) cout << "p0 is nullptr.\n";
	else cout << "Impossible.\n";	

	return 0;
}


free_store2
double* calc(int res_size, int max)
{
	double* p = new double[max]; //memoriaszivárgás mivel ez lokális változó és nincs returnolva az érték igy nem tudunk
	//rá hivatkozni és ezt a memoriát nem tudnuk felhasználni
	double* res = new double[res_size];
	// do something...
	delete[] p //memória terület felszabadítása
	return res;
}

int main()
{
	double* r = calc(100, 100);

	return 0;
}

Vektorok
#include "../../../std_lib_facilities.h"

class My_vector {
	int sz; //a mérete
	double* elem; //maga a tárhely
public:
	My_vector(int s) :sz(s), elem{new double[s]}
	{
		for (int i = 0; i < s; ++i) elem[i] = 0; //feltöltjük s ig 0 val
	}
	//~My_vector() { delete[] elem; } //a my vectorban felszabadulo felesleges hely törlése
	int size() const { return sz; } //size() parancs kiirja a tömb méretét
};

int main()
{
	My_vector v(10); //létrehoz egy 10 elemu helyet 0kal
	return 0;
}


Vektor 2
#include "../../../std_lib_facilities.h"

class My_vector {
	int sz;
	double* elem;
public:
	My_vector(int s) :sz(s), elem{new double[s]}
	{
		for (int i = 0; i < s; ++i) elem[i] = 0;
	}
	~My_vector() { delete[] elem; }

	double get(int n) const { return elem[n]; } //létrehoz egy n elemut
	void set(int n, double val) { elem[n] = val; } //n darabot val al növelve az értékét
	int size() const { return sz; }
};

int main()
{
	My_vector v(10);

	v.set(3, 2.2);

	//cout << v.get(3) << endl;

	for (int i = 0; i < 10; ++i)
		cout << v.get(i) << endl;		

	return 0;
}
Vektor3
#include "../../../std_lib_facilities.h"

class My_vector {
	int sz;
	double* elem;
public:
	My_vector(int s) :sz(s), elem{new double[s]}
	{
		for (int i = 0; i < s; ++i) elem[i] = 0;
	}
	~My_vector() { delete[] elem; }

	double get(int n) const { return elem[n]; }
	void set(int n, double val) { elem[n] = val; }
	int size() const { return sz; }
};

My_vector* some_fct() //a vektorunkat tartalmazo hely ez nem tomb
{
	My_vector* myvec = new My_vector(10);
	//some use...
	return myvec;
}

int main()
{
	My_vector v(10);

	v.set(3, 2.2);

	//cout << v.get(3) << endl;

	for (int i = 0; i < 10; ++i)
		cout << v.get(i) << endl;		

	My_vector* q = some_fct();
	cout << "Size of q: " << q->size() << endl; // a vektor méretének kiiratása
	delete q; //vektor törlése

	return 0;
}